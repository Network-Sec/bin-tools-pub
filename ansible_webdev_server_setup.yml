---
- hosts: localhost
  become: true
  vars:
    web_domain: "webdev.local"

  tasks:
    - name: Update and install development tools
      apt:
        name:
          - build-essential
          - curl
          - git
          - nginx
          - nmap
          - python3-pip
          - python3-venv
          - net-tools
          - docker.io
          - docker-compose
          - nodejs
          - npm
          - unzip
          - gnupg
        state: latest
        update_cache: yes

    - name: Install NVM, Node.js, and global packages for ubuntu user
      become_user: ubuntu
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install node
        npm install -g express-generator
      args:
        executable: /bin/bash

    - name: Install Python libraries
      pip:
        name:
          - requests
          - httpx
          - beautifulsoup4
          - lxml
          - flask
          - django
          - pandas
          - numpy

    - block:
      - name: Install Bun for ubuntu user
        become_user: ubuntu
        shell: |
          curl -o- https://bun.sh/install | bash
        environment:
          PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        args:
          executable: /bin/bash
      rescue:  # Rescue for the block
        - name: Task to run if Bun installation fails
          ansible.builtin.debug:
            msg: 'Bun install failed, re-run the playbook or install Bun manually.'

    - name: Create web root directory and set permissions for www-data user
      file:
        path: "/var/www/{{ web_domain }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0777'

    - name: Setup the Express app with www-data user
      become_user: ubuntu
      shell: |
        cd /var/www/{{ web_domain }} &&
        npm init -y &&
        npm install express &&
        echo "const express = require('express');" >> index.js &&
        echo "const app = express();" >> index.js &&
        echo "const port = 3000;" >> index.js &&
        echo "app.get('/', (req, res) => res.send('Hello World!'));" >> index.js &&
        echo "app.listen(port, () => console.log(\`App listening at http://localhost:${port}\`));" >> index.js
      args:
        executable: /bin/bash

    - name: Import MongoDB GPG key
      ansible.builtin.apt_key:
        url: https://www.mongodb.org/static/pgp/server-7.0.asc
        state: present
    
    - name: Add MongoDB Repository
      ansible.builtin.apt_repository:
        repo: "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse"
        state: present
        filename: 'mongodb-org-7.0'
    
    - name: Install MongoDB Server and Mongosh
      ansible.builtin.apt:
        update_cache: yes
        name:
          - mongodb-org
          - mongodb-mongosh
        state: present

    - name: Add Nginx configuration for webdev.local
      blockinfile:
        path: "/etc/nginx/sites-available/{{ web_domain }}"
        create: yes
        block: |
          server {
            listen 80;
            server_name {{ web_domain }};

            location / {
              proxy_pass http://localhost:3000;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $host;
              proxy_cache_bypass $http_upgrade;
            }
          }
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: Enable Nginx site configuration
      command: ln -s /etc/nginx/sites-available/{{ web_domain }} /etc/nginx/sites-enabled/
      args:
        creates: "/etc/nginx/sites-enabled/{{ web_domain }}"

    - name: Remove default Nginx site configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx to apply configuration
      service:
        name: nginx
        state: restarted

    - name: Add domain to /etc/hosts for local development
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ web_domain }}"
        state: present

    - name: Generate SSH key for root (if not exists)
      command: ssh-keygen -m PEM -t rsa -b 4096 -f /root/.ssh/id_rsa
      args:
        creates: "/root/.ssh/id_rsa"

    - name: Ensure .ssh directory is secure
      file:
        path: "/root/.ssh"
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Set up authorized_keys for root
      authorized_key:
        user: root
        state: present
        key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"

    - name: Secure SSH configuration for root login via SSH keys
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          PermitRootLogin without-password
          PasswordAuthentication no
          PubkeyAuthentication yes
        marker: "# {mark} ANSIBLE MANAGED BLOCK"

    - name: Restart ssh to apply configuration
      service:
        name: ssh
        state: restarted

    - name: Display root SSH private key
      command: cat /root/.ssh/id_rsa
      register: ssh_private_key

    - name: Show generated root SSH private key for manual copy
      debug:
        msg: "{{ ssh_private_key.stdout }}"
